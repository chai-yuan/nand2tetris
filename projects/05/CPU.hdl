/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */
CHIP CPU {
    IN  inM[16],         // 来自RAM[A]的内存数据
        instruction[16], // 指令
        reset;           // 若reset==1,对CPU复位
    OUT outM[16],        // 输出到内存的数据
        writeM,          // 是否写入内存
        addressM[15],    // 内存地址
        pc[15];          // 下一条指令地址
    PARTS:
        // 判断指令类型
        Not(in = instruction[15], out = isA);   // 指令的最大地址位 如果为1则是C指令 为0则是A指令
        Not(in = isA, out = isC);               // 对isC再次取返 判断是否C指令

        // 处理A寄存器
        And(a = isC, b = instruction[5], out = isLoadAluOut);   // 若是C指令，判断A寄存器的数据是否来自ALU
        Mux16(a = instruction, b = outALU, sel = isLoadAluOut, out = inAR);
        Or(a = isA, b = instruction[5], out = isLoadAR);    // 若是A指令或数据来自ALU，那么开启写入
        ARegister(in = inAR, load = isLoadAR, out = outAR, out[0..14] = addressM);  // 写入A寄存器

        // 判断ALU的输入来自A寄存器还是内存
        Mux16(a = outAR, b = inM, sel = instruction[12], out = outAM);

        // 处理C指令
        And(a = isC, b = instruction[3], out = writeM); // 如果是C指令并且规定写入到M
        And(a = isC, b = instruction[4], out = isLoadDR);   // 如果是C指令并且规定写入到DR
        DRegister(in = outALU, load = isLoadDR, out = outDR);
        // 根据C指令设置运算
        And(a = isC, b = instruction[6], out = no);     
        And(a = isC, b = instruction[7], out = f);
        And(a = isC, b = instruction[8], out = ny);
        And(a = isC, b = instruction[9], out = zy);
        And(a = isC, b = instruction[10], out = nx);
        And(a = isC, b = instruction[11], out = zx);
        // 执行运算
        ALU(x = outDR, y = outAM, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no = no, out = outALU, out = outM, zr=zr, ng=ng);

        // 根据j位域和ALU的zr、ng位来判断跳转
        And(a = isC, b = instruction[0], out = isGT);
        And(a = isC, b = instruction[1], out = isEQ);
        And(a = isC, b = instruction[2], out = isLT);

        And(a = ng, b = isLT, out = isLtJump);
        And(a = zr, b = isEQ, out = isEqJump);

        // 输出是否大于0
        Not(in = ng, out = notNg);
        Not(in = zr, out = notZr);
        And(a = notNg, b = notZr, out = isOutGt);
        
        And(a = isOutGt, b = isGT, out = isGtJump);

        Or(a = isLtJump, b = isEqJump, out = isJump);
        Or(a = isJump, b = isGtJump, out = jump);

        PC(in = outAR, load = jump, inc = true, reset = reset, out[0..14] = pc);
}