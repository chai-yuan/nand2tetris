	@256 // 程序起点
	D=A
	@SP
	M=D
	@Main$$RETURN_1// call Sys.init 0
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@0
	D=A
	@5
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Sys.init
	0;JMP
(Main$$RETURN_1)
(PROGRAM_BEGIN)
	@PROGRAM_BEGIN
	0;JMP
	// function : Main.fibonacci0
(Main.fibonacci)
	@0
	D=A
	@R13
	M=D
(Main$Main.fibonacci$INIT_LOOP_)
	@Main$Main.fibonacci$END_INIT_LOOP_
	D;JEQ
	@0
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@R13
	MD=M-1
	@Main$Main.fibonacci$INIT_LOOP_
	0;JMP
(Main$Main.fibonacci$END_INIT_LOOP_)
	@ARG // push argument 0
	D=M
	@0
	A=D+A
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@2 // push constant 2
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@SP // lt
	AM=M-1
	D=M
	@SP
	AM=M-1
	D=M-D
	@Main$Main.fibonacci$TRUE1
	D;JLT
	D=0
	@Main$Main.fibonacci$FALSE1
	0;JMP
(Main$Main.fibonacci$TRUE1)
	D=-1
(Main$Main.fibonacci$FALSE1)
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@SP// if-goto IF_TRUE
	AM=M-1
	D=M
	@Main$Main.fibonacci$IF_TRUE
	D;JNE
	@Main$Main.fibonacci$IF_FALSE
	0;JMP
(Main$Main.fibonacci$IF_TRUE)// label IF_TRUE
	@ARG // push argument 0
	D=M
	@0
	A=D+A
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL // return
	D=M
	@R13
	M=D
	@5
	A=D-A
	D=M
	@R14
	M=D
	@SP
	AM=M-1
	D=M
	@ARG
	A=M
	M=D
	D=A
	@SP
	M=D+1
	@R13
	AM=M-1
	D=M
	@THAT
	M=D
	@R13
	AM=M-1
	D=M
	@THIS
	M=D
	@R13
	AM=M-1
	D=M
	@ARG
	M=D
	@R13
	AM=M-1
	D=M
	@LCL
	M=D
	@R14
	A=M
	0;JMP
(Main$Main.fibonacci$IF_FALSE)// label IF_FALSE
	@ARG // push argument 0
	D=M
	@0
	A=D+A
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@2 // push constant 2
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@SP // sub
	AM=M-1
	D=M
	A=A-1
	M=M-D
	@Main$Main.fibonacci$RETURN_3// call Main.fibonacci 1
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@1
	D=A
	@5
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
(Main$Main.fibonacci$RETURN_3)
	@ARG // push argument 0
	D=M
	@0
	A=D+A
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@1 // push constant 1
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@SP // sub
	AM=M-1
	D=M
	A=A-1
	M=M-D
	@Main$Main.fibonacci$RETURN_4// call Main.fibonacci 1
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@1
	D=A
	@5
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
(Main$Main.fibonacci$RETURN_4)
	@SP // add
	AM=M-1
	D=M
	A=A-1
	M=D+M
	@LCL // return
	D=M
	@R13
	M=D
	@5
	A=D-A
	D=M
	@R14
	M=D
	@SP
	AM=M-1
	D=M
	@ARG
	A=M
	M=D
	D=A
	@SP
	M=D+1
	@R13
	AM=M-1
	D=M
	@THAT
	M=D
	@R13
	AM=M-1
	D=M
	@THIS
	M=D
	@R13
	AM=M-1
	D=M
	@ARG
	M=D
	@R13
	AM=M-1
	D=M
	@LCL
	M=D
	@R14
	A=M
	0;JMP
	@256 // 程序起点
	D=A
	@SP
	M=D
	@Sys$$RETURN_1// call Sys.init 0
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@0
	D=A
	@5
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Sys.init
	0;JMP
(Sys$$RETURN_1)
(PROGRAM_BEGIN)
	@PROGRAM_BEGIN
	0;JMP
	// function : Sys.init0
(Sys.init)
	@0
	D=A
	@R13
	M=D
(Sys$Sys.init$INIT_LOOP_)
	@Sys$Sys.init$END_INIT_LOOP_
	D;JEQ
	@0
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@R13
	MD=M-1
	@Sys$Sys.init$INIT_LOOP_
	0;JMP
(Sys$Sys.init$END_INIT_LOOP_)
	@4 // push constant 4
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@Sys$Sys.init$RETURN_2// call Main.fibonacci 1
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@1
	D=A
	@5
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
(Sys$Sys.init$RETURN_2)
(Sys$Sys.init$WHILE)// label WHILE
	@Sys$Sys.init$WHILE
	0;JMP
