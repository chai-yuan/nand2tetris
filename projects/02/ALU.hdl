/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  x[16], y[16],  // 16-bit 输入       
        zx, // x置零
        nx, // x取反
        zy, // y置零
        ny, // y取反
        f,  // 改变功能:x + y (if 1) or x & y (if 0)
        no; // 输出取反
    OUT out[16], // 16-bit 输出
        zr, // 输出是否为0
        ng; // 输出是否为负数
    PARTS:
        // 判断置零
        Mux16(a = x, b = false, sel = zx, out = x1);
        Mux16(a = y, b = false, sel = zy, out = y1);
        // 判断取反
        Not16(in = x1, out = x2);
        Mux16(a = x1, b = x2, sel = nx, out = x3);
        Not16(in = y1, out = y2);
        Mux16(a = y1, b = y2, sel = ny, out = y3);
        // 执行不同功能计算
        And16(a = x3, b = y3, out = f1);
        Add16(a = x3, b = y3, out = f2);
        Mux16(a = f1, b = f2, sel = f, out = o1);
        // 输出取反
        Not16(in = o1, out = o2);
        Mux16(a = o1, b = o2, sel = no, out = out, out = o3);
        // 判断零位
        Or16Way(in = o3, out = zr1);
        Not(in = zr1, out = zr);
        // 判断负数
        IsNeg(in = o3, out = ng);
}